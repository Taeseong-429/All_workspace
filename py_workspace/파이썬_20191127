용어
1. 파이썬 인터프리터(interpreter)
   파이썬 코드를 해석하고 실행시키는 주체
   ==> "python" 명령어

2. 파이썬 interactive shell
   ">>>" prompt 를 출력시키고, 
   개발자로부터, 파이썬 코드를 입력받고,
   바로 해석하여, 실행시키는 주체

3. 파이썬 ---> 인터프리터 기반의 언어 : Python, Javascript, Perl

   <-> 컴파일 언어 (compile-based language) : Java, C, C++

4. 플랫폼 호환성
   여러 운영체제기반 위에서, 동일하게 프로그램을 개발할 수 있는 
   성질   

5. 디버그(debug): 프로그램에서 발생하는 오류의 원인을 찾아내고,
                  해결해나가는 과정   

6. 워크스페이스(workspace, 작업공간):
   앞으로 개발자가 개발할 프로그램 파일을 저장할 폴더

7. 파이썬 스크립트 파일(별칭: 파이썬 모듈)
   확장자가 .py 파일로, 그 안에 파이썬 코드를 작성함

   어느때에, 모듈이라고 불리는가?

   우리가 작성한 파이썬 스크립트 파일이, 다른 코드에서도 재사용될 때,
   이 재사용되는 파이썬 스크립트 파일을 "모듈"(module)이라고 부름.

8. 리터럴(Literal) ====> "상수" (그 값이 변경될 수 없는 값)
   순수한 값 그자체를 의미.

    예: 1 (정수), 1.23 (실수), "Yoseph" (문자열), True/False (Boolean)

9. 연산자(operator) 
   주어진 변수(또는 리터럴)들에 대한 가공(연산)을 수행하는 역할

   예) +, - , *, /, **, //, %

   연산자는 반드시, 피연산자(operand)를 가지게 됩니다

   연산자마다, 요구되는 피연산자의 개수가 정해집니다.
   이때, 피연산자의 개수가 2개이면, 이 연산자를 "이항 연산자"라고 한다.
   피연산자의 개수가 3개이면, 이 연산자를 "삼항 연산자"
   피연산자의 개수가 1개이면, 이 연산자를 "단항 연산자"
   피연산자의 개구가 4개 이상이면, 이 연산자를 "다항 연산자"

   *중요*) 연산자의 피연산자(operand)로 올수 있는 것은,
           (1) 변수
           (2) 리터럴(순수한 값)
           (3) 또 다른 연산식(1개 이상의 연산자와 피연산자로 구성된 식) 


10. 변수의 선언과 정의

    가. 변수의 선언: 변수이름을 선언만 하고, 값을 주지 않은 경우
                    이때, 우리는 "변수를 선언한다" 라고 표현

    나. 변수의 정의: 변수의 선언 + 초기값 할당 
    
        예: 변수 a를 3으로 정의  --> a = 3
        예: 변수 name을 나의 이름으로 정의 --> name = "Yoseph"

11. 파이썬에서 정의한 변수의 자료형(data type)을 확인해주는 
    함수(function) ----> type() 함수 사용

    Usage: >>> type(변수)    

12. 프로그래밍에서 "함수(function)"란, 특정 기능을 수행하는 
    일련의 코드들의 모음(묶음) 단위를 의미함

    예) print() 함수 --> 특정기능: 주어진 변수(또는 값)을 출력


    함수를 만들때 ---> 우리는 "함수를 정의한다" 또는 "함수를 선언한다" 라고
                      표현합니다.

    함수를 만들때 필요한 키워드가 있는데, "def" 라고 하는 키워드를 사용
    "def" ---> "definition(정의)"

    예) 실습


13. Escape Character(탈출문자)    
    특수한 기능을 가지는 문자를 ---> 평범한 문자로 바꿔주는 '\'를
    탈출문자(escape character)라고 함

    예: \', \",    ---> 기존 기능을 삭제
        \n(newline), \t(tab), \b(backspace) --> 새로운 기능을 부여


14. 슬라이싱 기법(slicing)

    형태: 변수이름[시작인덱스번호 : 끝인덱스번호] 

          - 시작인덱스번호 ===> offset
          - 끝인덱스번호   ===> length


15. OOP (Object-Oridented Programming, 객체지향 프로그래밍)
    하나의 프로그램을, 여러 객체로 구성하고, 구성된 객체와 객체 사이의
    상호작용(interaction)을 통해서, 이 프로그램이 완성되는 개념의
    프로그래밍 패러다임 중 하나.

    대표적인 OOP 언어: Java, C++, Python, Javascript, ....

    (1) 객체란? 눈에 보이든/보이지 않는, 명사로 표현가능한 모든 사물
    (2) 객체는 반드시 속성(Attributes)와 행위(Methods)을 가질 수 있다.
    (3) 파이썬 언어는, 실은 모든 자료형(Data Types)이 바로 '객체'이다!!!
        (***** 중요 ****)

    OOP의 예: 자동차와 자동차 부품

    파이썬에서, 어떤 객체가 가지고 있는 행위(methods)를 호출하려면, "객체변수명.호출할메소드명" 형태로, 특정 메소드를 호출하여 실행시킬
    수 있음.

    (여기서, '.' (dot operator) 도트 연산자 ==> "객체멤버참조연산자")


16. 무한루프(Infinite Loop) : 반복횟수가 제한이 없이, 무한히 반복되는 것

    예) while True :		# 무한루프
    		print("저는 무한루프입니다")


17. 함수의 매개변수(parameter)란?

    예: 함수 선언(정의)	    		

    	# 함수정의
        def add(op1, op2):
        	return op1+op2

	    # 함수호출
	    result = add(1, 2) # 매개변수(parameter)로 전달되는 값 ---> 전달인자(argument)  

18. Function Prototype and Method Signature
    가. Function Prototype (함수 프로토타입)
        선언(정의)된 함수의 헤더부분을 지칭하는 단어

	나. Method Signature (메소드 시그니처)        
	    선언(정의)된 객체의 메소드의 헤더부분을 지칭하는 단어

19. 자료형과 자료구조의 차이
    가. 자료형: 하나의 데이터의 유형을 의미
    나. 자료구조: 여러 자료형으로 구성된 데이터를 , 0개 이상
                 동시에 저장하는 구조를 의미함.

20. 자료구조#1 : 리스트(List)                 	    
    가. 모든 자료구조 역시, 객체입니다(속성과 메소드를 가짐)
    나. 리스트는 0개 이상의 값을 저장하는 자료구조
    다. 리스트를 생성할려면, 대괄호 기호([])를 사용하고,
        각각의 값을 ',' 로 구분해서 저장합니다.

        예: scores = [99, 100, 22]

21. 연산식: 연산자와 피연산자로 구성되는 식

    원칙: 모든 피연산자는 타입이 같아야 된다!!!!
    원칙을 준수하기 위해서 필요한 작업 ----------> "형변환"   

    형변환의 종류 2가지:

    	(1) 자동형변환(Promotion) : 언어차원에서 자동으로 형변환
    	(2) 강제형변환(Casting) : 개발자가 직접 형변환

22. 변수의 값 복사
	 
	 ex) a = [1,2,3]

    가. 얕은 복사(Shadow Copy) : 하나의 객체의 주소를 복사
        ex) b = a

    나. 깊은 복사(Deep Copy) : 동일한 값을 완전히 별개로 만들어 복사
        ex) b = a[:]

23. Short-Circuiting
    가. 논리연산자인 OR(논리합, '또는') 연산자는 이항연산자이다
    나. 때문에, 좌/우에 각각 조건식이 오는데, 
    다. 만일, 좌측에 오는 조건식이 True 라면, 우측의 조건식을
        판단(정)하지 않고 지나가는 효과를 의미

23. 함수 매개변수의 종류와 규칙
	함수선언시, 매개변수리스트를 구성할때,

	(1)일반적인 형태의 매개변수 -> Positional Argument

	(2) *붙은 가변인자 매개변수 -> Variant Argument

	(3) **붙은 매개변수 --> Keyword Argument

    세가지 종류의 매개변수가 있다!!!!

    그리고, 만일 함수선언시 위 세가지 종류의
    매개변수를 함께 사용하여 선언시, 규칙이 존재한다:

    def func(Positional Arguments, Variant Arguments, Keyword Arguments)

    위 순서를 반드시 지켜야 함!!!
     
24. 전역변수와 지역변수의 유효범위
    가. 전역변수의 유효범위
        프로그램의 실행이 종료될때 까지 유지되는 변수
	나. 지역변수의 유효범위

	    "자기가 정의/선언된 함수블록 범위 내에서만 유지되는 변수" 

25. 람다식으로 변환할, def 함수 --> "람다식의 타켓함수"


26. 커서(Cursor)에는 2가지 종류가 있다.
    (1) 마우스 커서 - 스크린 상에, 마우스의 움직임에
                     따라, 같이 움직이는 표시자
                   - 마우스 입력을 받는 위치를 의미

	(2) 키보드 커서 - 프롬프트 다음에, 
	               - 키보드 입력을 받을 위치를 표시
	               - 키보드 입력받을 위치를 의미

27. 운영체제의 파일시스템에 저장되어 있는, 파일의 종류
    크게 두가지로 나눌 수 가 있다.
    (1) Text-based File --> "텍스트 파일"이라고 부르고
        예: *.txt, *.py, *.dat, *.csv

    (2) Byte-based File --> "바이너리 파일(이진파일)"
        예: *.mp3, *.mp4, *.jpg/jpeg/png/gif/bmp,
            모든 실행파일들(*.exe, *.cmd, ...)


28. 문자집합(Character Set)

    (1) 바이트 (byte)
        컴퓨터에서, 데이터를 메모리에 저장 및 표현하는 최소단위

    (2) 메모리 - 그 크기만큼의 바이트의 개수로 구성

    (3) 문자집합 - 각 나라의 언어마다, 표현가능한 모든 문자를
                  여러바이트를 이용해서, 이미 정해놓은 테이블

	    예1) 영어권을 위한 문자집합 
	         ---> ISO-8859-1 (ASCII)  
	         
        예2) 대한민국을 위한 문자집합
             ---> EUC-KR
             ---> KSC5601

        예3) 모든 나라의 문자들을 표시할 수 있는 문자집합
             ---> UTF-8

        예4) 윈도우 운영체제의 기본 문자집합
             ---> MS949 (= CP949)

    (4) 디코드(decode) / 인코드(encode)


29. EOF (End-Of-File) : 파일의 끝을 표시하는 특수문자
    가. 이 특수문자는 눈으로 보이는 문자가 아니기 때문에 -> 특수문자    
    나. ASCII 문자집합 테이블에 정의되어 있는 특수문자
    다. 프로그램 코드가 파일을 열고, 파일의 처음부터 읽다가, EOF를
        만나면, 파일의 끝을 인식하고, 끝내게 됩니다.(읽은 행위가 중단)


30. 클래스

    class 붕어빵:

    	 # __init__ 메소드 --> 생성자(Constructor)
    	 # 생성자 :
    	   (1) classs 로부터, 객체가 만들어질 때, 자동으로 호출되는 
    	       메소드 입니다.
    	   (2) 메소드는 맞으나, 메소드라고 부르지 않고, 생성자 라고
    	   	   부릅니다.
    	   (3) 역할 : 이 클래스로부터 생성되는 초기화를 담당

    	# self :
    	  (1) 이 매개변수의 이름은, 개발자 마음대로 바꾸셔도 됩니다.
    	      하지만, 일반적으로 바꾸지 않습니다. 왜?
    	  (2) class(객체를 찍어내는 틀) 에서, 생성된(찍어낸) 객체의 주소값을 전달받습니다(by 파이썬 인터프리터에 의해)
    	  (3) 결과적으로, class에서 찍어낸 객체와 self는 같다!!!


    	# 객체가 가지는 속성을 class에서 필드(filed)로 어떻게 선언하는가???
    	
    	# self.<객체의 속성명> = 초기값 1
    	# self.<객체의 속성명> = 초기값 2

    	# self.<객체의 속성명> = 초기값 

	    def __init__(self):
	        self.result = 0				# 객체의 필드를 생성
	        pass # def

	    def add(self, num):				# 객체의 필드를 사용!! 
	        self.result += num
	        return self.result
	        pass # def

		pass # class	        



































