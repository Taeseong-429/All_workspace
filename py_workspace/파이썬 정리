1. 클래스를 타입 찍으면 타입 나오고, 메소드 찍으면 메소드 나옴.

2. AttributeError 뜨면 내가 현재 클래스 안에 정의되지 않은 인스턴스 필드를 쓴거구나 하고 클래스 내부를 확인해야함.
calc = Calculator()
>>> calc.name
Traceback (most recent call last):
  File "<pyshell#15>", line 1, in <module>
    calc.name
AttributeError: 'Calculator' object has no attribute 'name'

3. dir() 로 변수 뭐 있는지 확인 가능. 이걸 del x 로 메모리 차지하는 쓸모없는 변수 지울 수 있음.

4. 글로벌 변수를 보고싶다면 globals() 치면 됨 - 값까지 볼 수 있음.

5. 지역 변수를 보고싶다면 locals() 검색.

6. import pprint as pp 치고 pp 검색하면 모듈로 pprint를 갖고 있고, 절대경로 알려줌.

7. 그 다음 dir(pp)하면 피프린트 모듈이 갖고 있는 거 보여줌.

8. import pprint as pp
pp.pprint(dir(calc1)) # 객체의 모든 멤버를 리스트형태로 리턴하고, pp는 보기좋게 보여줘라 이뜻. 

9. 파이썬 언어에서는 모든게 객체인데, 객체의 최상위(가장 높은 조상) 클래스 이름 --object (모든 클래스의 조상은 object)

10. help(object) 하면 이 클래스 안에 무슨 메소드 들어있는지 같은거 알려줌. help(변수) 이렇게 쳐도 뭐 할 수있는지 도움말 나옴.

11. 부모클래스, 자식클래스

12. invoked가 뭔지.

13. super() 소괄호를 수행하는 순간 부모 객체가 생성됨. 즉, 부모 객체가 생성된다. 부모 객체 없이 자식객체가 생성될 수 없기
떄문에 super(). 로 부모 만들고 생성자를 만든다. 
 super().__init__() 에서 점 왼쪽은 부모객체 생성, 오른쪽은 초기화 의미.
 부모 객체의 생성 코드를 직접 넣어주는게 super().__init__() 
 부모가 있어야 자식도 있기 때문에, 자식 클래스의 내부에서는 부모 객체 생성하고 초기화하는 코드 넣어야 된다! 
 안그러면 AtrributeError 생김.

14. 재귀호출(Recursive Call)

 def func(n) :
 	print('func invoked')

 	 func(n-1)
 	 pass

15. globals(), dir(), locals() 멤버들 다 보여주는 것.

pprint() 로 보면 더 깔끔하게 볼 수 있음.

16. import sys 하고 sys.path.append('C:\\app') 주소 넣고 모듈을 이 장소 어디서나 쓸 수 있음.

17. cmd 켜서 set PYTHONPATH 명령어로 리스트로 정리된 목록 볼 수 있음.
지우는건 set PYTHON= 여기 공백 .

18. Caching 날라가버림
- when? interpreter가 종료될 때.

19. from import는 어디서든 수행하든 잘 된다. (절대경로 썼을 때)

20. 위치찾는거 import os;print(os.getcwd())

21. try:
		f = open('없는파일', 'r')
	except (FileNotError)


22. with open('파일경로','파일모드') as f :
		 try :
		 		pass
		 except:
		 		pass
		 finally:
		 		pass
		 		
23. dir() 함수 기능

 (1) For module, show the specified modules's attributes

 (2) For class, show the specified class's 
    1) attributes 
    2) recursively the attributes of its base

 (3) For any object, show the specified object's 
    1) attributes 
    2) recursively the attributes of its base

24. * 빅데이터로 할 수 있는 연산작업을 크게 두가지로 나누면, 보통 이렇게 표현합니다.

		(1) map 작업 (형변환작업: 예: 숫자형 텍스트 --> 숫자)
		(2) reduce 작업 (Aggregation = 집계)

	위 두개를 합쳐서, 보통 "MapReduce" 라고 합니다.

25. * OOP language 에서, 반드시 알아야할 개념 소개 *

1. 객체의 직렬화(Serialization)
 -> 메모리에 생성되어 있는 객체를 파일등에 저장하기 위해, 일련의 바이트열로 변환하는 작업
 	(Object -> Byte Sequence)

2. 객체의 역직렬화(De-Serialization)
 	(Byte Sequence -> Object)

26. Temporary file --> 임시파일


27. s = '임시데이터2'
	bytesResult = s.encode('utf8') 이건 문자열이 제공하는 함수로, byte 타입으로 바꿔주는거.

28. 27번과 다른 방식. bytesResult = b'ABC' 로 바꾸는 방법있음. 근데 이건 아스키코드만 지원해주나 ?

29. random --> '난수 생성기' -> 의사난수생성기(Pseudo Random Number)
			   (Random Number)
			   '무작위'

30. 
 1) Crowling (지정사이트의 모든자원 :
*.html, *.css, *.js, *.jpg, *.mp3, *.mp4)

 2) Scraping
 	정상적인 계정과 암호로 로그인하고 마치 사람이 웹페이지를 보는것과 같이 프로그램이 보게 만들고 보았던 페이지를 
 	*.html 파일의 소스만 가져감.

 3) DDoS 공격

 	공공데이터 포털(OpenAPI) or 민간 OpenAPI