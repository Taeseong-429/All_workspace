View(wordcount)
wordcount <- na.omit(wordcount$Var1 | wordcount$Freq)
wordcount <- na.omit(wordcount$Var1)
wordcount <- table(unlist(nouns))
wordcount <- na.omit(wordcount)
View(wordcount)
wordcount <- table(unlist(nouns))
View(wordcount)
df_word <- as.data.frame(wordcount)
View(wordcount)
View(df_word)
rename
df_word <- rename(df_word,
word = Var1,
freq = Freq)
df_word
df_word <- filter(df_word, nchar(word) >= 2)
kakao1 <- gsub('(2020년).+(:)', '', kakao)
df_word <- filter(df_word, nchar(word) >= 2)
df_word <- as.data.frame(wordcount, stringsAsFactors = F)
View(df_word)
df_word <- rename(df_word,
word = Var1,
freq = Freq)
df_word <- filter(df_word, nchar(word) >= 2)
df_word
df_word
top_20 <- df_word %>%
arrange(desc(freq)) %>%
head(20)
top_20
pal <- brewer.pal(8, 'Dark2') # Dark2 색상 목록에서 8개 색상 추출
pal #  컴퓨터에서 색상을 지정하는 RGB 값
set.seed(1234) # 난수 고정. 난수 만들기 위한 ...
wordcloud(words = df_word$word, # 단어
freq = df_word$freq, # 빈도
min.freq = 2, # 최소 단어 빈도
max.words = 200, # 표현 단어 수
random.order = F, # 고빈도 단어 중앙 배치 # 난수 생성으로
rot.per = .1, # 회전 단어 비율 # 10% 정도만 회전시켜라
scale = c(4, 0.3), # 단어 크기 범위 # 이 값을 조절하면 단어 크기 변동..
colors = pal) # 색깔 목록록
library(wordcloud)
library(RColorBrewer)
set.seed(1234) # 난수 고정. 난수 만들기 위한 ...
wordcloud(words = df_word$word, # 단어
freq = df_word$freq, # 빈도
min.freq = 2, # 최소 단어 빈도
max.words = 200, # 표현 단어 수
random.order = F, # 고빈도 단어 중앙 배치 # 난수 생성으로
rot.per = .1, # 회전 단어 비율 # 10% 정도만 회전시켜라
scale = c(4, 0.3), # 단어 크기 범위 # 이 값을 조절하면 단어 크기 변동..
colors = pal) # 색깔 목록록
kakao <- str_replace_all(kakao, pattern = '이모티콘|메시지|삭제된입니니', '')
kakao <- str_replace_all(kakao, pattern = '이모티콘|메시지|삭제된입니', '')
kakao <- str_replace_all(kakao, pattern = '(2020년).+(:)', '')
kakao <- str_replace_all(kakao, pattern = '(2019년).+(:)', '')
kakao <- str_replace_all(kakao, pattern = '(ㅜ|ㅠ)+', '')
kakao <- str_replace_all(kakao, pattern = '\\W','')
kakao <- na.omit(kakao)
View(kakao)
nouns <- extractNoun(kakao)
wordcount <- table(unlist(nouns))
wordcount <- na.omit(wordcount)
df_word <- as.data.frame(wordcount, stringsAsFactors = F)
df_word <- rename(df_word,
word = Var1,
freq = Freq)
df_word <- filter(df_word, nchar(word) >= 2)
top_20 <- df_word %>%
arrange(desc(freq)) %>%
head(20)
pal <- brewer.pal(8, 'Dark2') # Dark2 색상 목록에서 8개 색상 추출
set.seed(1234) # 난수 고정. 난수 만들기 위한 ...
wordcloud(words = df_word$word, # 단어
freq = df_word$freq, # 빈도
min.freq = 2, # 최소 단어 빈도
max.words = 200, # 표현 단어 수
random.order = F, # 고빈도 단어 중앙 배치 # 난수 생성으로
rot.per = .1, # 회전 단어 비율 # 10% 정도만 회전시켜라
scale = c(4, 0.3), # 단어 크기 범위 # 이 값을 조절하면 단어 크기 변동..
colors = pal) # 색깔 목록록
top_20
library(ggiraphExtra)
# 미국 주별 범죄 데이터 준비하기
str(USArrests)
head(USArrests)
colnames(USArrests)
library(tibble)
detach("package:tibble", unload = TRUE)
# 행 이름을 state 변수로 바꿔 데이터 프레임 생성
crime <- rownames_to_column(USArrests, var = 'state') # 행의 이름을 데이터로 갖는
library(tibble)
# 행 이름을 state 변수로 바꿔 데이터 프레임 생성
crime <- rownames_to_column(USArrests, var = 'state') # 행의 이름을 데이터로 갖는
# var 생성 ??
crime
# var 생성 ??
View(crime)
head(USArrests)
USArre
View(USArrests)
# 행 이름을 state 변수로 바꿔 데이터 프레임 생성
crime <- rownames_to_column(USArrests, var = 'state') # 행의 이름을 데이터로 갖는
# var 생성 ??
View(crime)
# 지도 데이터와 동일하게 맞추기 위해  state의 값을 소문자로 수정
crime$state <- tolower(crime$state)
View(crime)
# 행 이름을 state 변수로 바꿔 데이터 프레임 생성
crime <- rownames_to_column(USArrests, var = 'state') # 행의 이름 state 변수로 바꿔
# 데이터 프레임 생성
View(crime)
# 지도 데이터와 동일하게 맞추기 위해  state의 값을 소문자로 수정
crime$state <- tolower(crime$state)
View(crime)
library(ggplot2)
states_map <- map_data('state')
str(states_map)
# 단계 구분도 만들기
ggChoropleth(data = crime,       # 지도에 표현할 데이터
aes(fill = Murder,  # 색깔로 표현할 변수
map_id = state),# 지역 기준 변수
map = states_map)   # 지도 데이터
library(ggiraphExtra)
# 단계 구분도 만들기
ggChoropleth(data = crime,       # 지도에 표현할 데이터
aes(fill = Murder,  # 색깔로 표현할 변수
map_id = state),# 지역 기준 변수
map = states_map)   # 지도 데이터
# 아래 두 개의 패키지를 추가로 설치해야함.
install.packages('maps', type = 'binary', dependencies = T)
install.packages("maps", type = "binary", dependencies = T)
install.packages('mapproj', type = 'binary',dependencies = T)
# 단계 구분도 만들기
ggChoropleth(data = crime,       # 지도에 표현할 데이터
aes(fill = Murder,  # 색깔로 표현할 변수
map_id = state),# 지역 기준 변수
map = states_map)   # 지도 데이터
install.packages('mapproj', type = 'binary',dependencies = T)
# 아래 두 개의 패키지를 추가로 설치해야함.
install.packages('maps', type = 'binary', dependencies = T)
library(ggiraphExtra)
library(tibble)
# 미국 주 지도 데이터 준비하기
library(ggplot2)
# 단계 구분도 만들기
ggChoropleth(data = crime,       # 지도에 표현할 데이터
aes(fill = Murder,  # 색깔로 표현할 변수
map_id = state),# 지역 기준 변수
map = states_map)   # 지도 데이터
# 인터랙티브 단계 구분도 만들기
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map,
interactive = T)
# 단계 구분도 만들기
ggChoropleth(data = crime,       # 지도에 표현할 데이터
aes(fill = Murder,  # 색깔로 표현할 변수
map_id = state),# 지역 기준 변수
map = states_map)   # 지도 데이터
# 인터랙티브 단계 구분도 만들기
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map,
interactive = T)
# 패키지준비하기
install.packages('stringi', dependencies = T)
install.packages("stringi", dependencies = T)
library(kormaps2014)
devtools::install_github('cardiomoon/kormaps2014')
library(kormaps2014)
colnames(korpop1)
# 대한민국 시도별 인구 데이터 준비하기
# 한글 깨지는거 방지하기
str(changeCode(korpop1))
# 대한민국 시도별 인구 데이터 준비하기
# 한글 깨지는거 방지하기
str(changeCode(korpop1))
# 데이터 먼징 작업
library(dplyr)
korpop1
korpop1 <- korpop1 %>% rename(pop = '총인구_명',name = '행정구역별 읍면동')
str(changeCode(kormap1))
View(kormap1)
View(changeCode(kormap1))
# ----------나도 체인지 코드 적용한 새로운 변수 만듦.
korpop1_change <- changeCode(korpop1)
kormap1_change <- changeCode(kormap1)
View(kormap1_change)
View(korpop1_change)
korpop1 <- korpop1 %>% rename(pop = '총인구_명',name = '행정구역별_읍면동')
# ----------나도 체인지 코드 적용한 새로운 변수 만듦.
korpop1_change <- changeCode(korpop1)
kormap1_change <- changeCode(kormap1)
View(kormap1_change)
View(korpop1_change)
# 단계 구분도 만들기
ggChoropleth(data = korpop1_change,
aes(fill = pop,
map_id = code,
tooltip = name),
map = kormap1,
interactive = T)
library(ggiraphExtra)
library(tibble)
# 미국 주 지도 데이터 준비하기
library(ggplot2)
# 데이터 먼징 작업
library(dplyr)
# 단계 구분도 만들기
ggChoropleth(data = korpop1_change,
aes(fill = pop,
map_id = code,
tooltip = name),
map = kormap1,
interactive = T)
#패키지 준비하기
install.packages('plotly')
#패키지 준비하기
install.packages('plotly', dependencies = T)
library(plotly)
# ggplot으로 그래프 만들기
library(ggplot2)
p <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
# 인터랙티브 그래프 만들기
ggplotly(p)
??mpg
# 인터랙티브 막대 그래프 만들기
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "dodge")
ggplotly(p)
?? diamonds
View(diamonds)
p
a <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
a
a <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv))
a
a <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
a
# 인터랙티브 그래프 만들기
ggplotly(a)
# 인터랙티브 막대 그래프 만들기
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "dodge")
p
ggplotly(p)
p
ggplotly(p)
diamonds
?? diamonds
str(diamods)
str(diamonds)
# 인터랙티브 막대 그래프 만들기
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "dodge")
str(diamonds)
# 인터랙티브 막대 그래프 만들기
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar()
str(diamonds) # 타입 보니까 cut. colorl clar 이건 순서 범주형 변수임 !
p
ggplotly(p)
# 인터랙티브 막대 그래프 만들기
# p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
#  geom_bar()
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = 'dodge')
# 인터랙티브 막대 그래프 만들기
# p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
#  geom_bar()
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = 'dodge')
ggplotly(p)
# 패키지 준비하기
install.packages('dygraphs')
# 패키지 준비하기
install.packages('dygraphs', dependencies = T)
library(dygraphs)
# 데이터 준비하기
economics <- ggplot2::economics
head(economics)
??economics
??economics
# 시간 순서 속성을 지니는 xts 데이터 타입으로 변경
library(xts)
eco <- xts(economics$unemploy, order.by = economics$date)
head(eco)
# 데이터 준비하기
economics <- ggplot2::economics
head(economics)
eco <- xts(economics$unemploy, order.by = economics$date)
# unemploy 데이터를 정렬해서 시계열 데이터로 만들어라. (date 변수로)
head(eco)
class(eco)
str(eco)
# unemploy 데이터를 정렬해서 시계열 데이터로 만들어라. (date 변수로)
head(eco)
str(economics)
# 인터랙티브 시계열 그래프 만들기
# 그래프 생성
dygraph(eco)
# 날짜 범위 선택 기능
dygraph(eco) %>% dyRangeSelector()
# 인터랙티브 시계열 그래프 만들기
# 그래프 생성
dygraph(eco)
# 날짜 범위 선택 기능
dygraph(eco) %>% dyRangeSelector()
# 저축률
eco_a <- xts(economics$psavert, order.by = economics$date)
# 실업자 수
eco_b <- xts(economics$unemploy/1000, order.by = economics$date)
head(economics)
??economics
# 실업자 수
eco_b <- xts(economics$unemploy/1000, order.by = economics$date)
# 들어가서 실업자 unemploy 관련 뜻 보니 number of unemployed in thousands, 이거.
View(eco_b)
# 합치기
eco2 <- cbind(eco_a, eco_b) # 데이터 결합합
View(eco2)
View(eco2)
colnames(eco2)
rownames(eco2)
colnames(eco2) <- c('psavert', 'unemploy')
colnames(eco2) <- c('psavert', 'unemploy') # 변수명 바꾸기
View(eco2)
# 그래프 만들기
dygraph(eco2) %>% dyRangeSelector()
# 인터랙티브 단계 구분도 만들기
ggChoropleth(data = crime,       # 지도에 표현할 데이터
aes(fill = Murder,  # 색깔로 표현할 변수
map_id = state),# 지역 기준 변수
map = states_map,   # 지도 데이터
interactive = T)    # 인터랙티브
str(states_map)
# 단계 구분도 만들기
ggChoropleth(data = crime,       # 지도에 표현할 데이터
aes(fill = Murder,  # 색깔로 표현할 변수
map_id = state),# 지역 기준 변수
map = states_map)   # 지도 데이터
# 인터랙티브 단계 구분도 만들기
ggChoropleth(data = crime,       # 지도에 표현할 데이터
aes(fill = Murder,  # 색깔로 표현할 변수
map_id = state),# 지역 기준 변수
map = states_map,   # 지도 데이터
interactive = T)    # 인터랙티브
# 그래프 만들기
dygraph(eco2) %>% dyRangeSelector()
??economics
head(economics)
# compact 자동차와 sub 자동차의 도시 연비 t 검정
# 데이터 준비
mpg <- as.data.frame(ggplot2::mpg)
library(dplyr)
mpg_diff <- mpg %>%
select(class,cty) %>%
filter(class %in% c('compact', 'suv'))
View(mpg_diff)
mpg_diff <- mpg %>%
filter(class %in% c('compact', 'suv')) %>%
select(class,cty)
View(mpg_diff)
table(mpg_diff$class)
summary(mpg_diff)
summary(mpg)
summary(mpg_diff)
summary(mpg_diff)
summary(mpg_diff %>% filter(class %in% 'compact'))
summary(mpg)
table(mpg_diff$class)
summary(mpg_diff %>% filter(class %in% 'compact')) # suv 차량과 compact 차량의 도시연비 기술통계량량
summary(mpg_diff %>% filter(class %in% 'suv'))
summarise(mpg_diff %>% group_by(mpg_diff$class, mean(cty))
summarise(mpg_diff %>% group_by(mpg_diff$class, mean(cty)))
summarise(mpg_diff %>% group_by(mean_cty = mean(cty))
summarise(mpg_diff %>% group_by(mean_cty = mean(cty)))
summarise(mpg_diff %>% group_by(class) %>% (mean_cty = mean(cty)))
summarise(mpg_diff %>% group_by(class)
summarise(mpg_diff %>% group_by(class))
boxplot(mpg_diff$cty)
mpg_diff %>%
group_by(class) %>%
summarise(mean_cty = mean(cty))
boxplot(mpg_diff$hwy, col = 'lightgray') # hwy
boxplot(mpg_diff$cty, col = 'yellow') # cty
boxplot(mpg_diff$hwy, col = 'lightgray') # hwy
boxplot(mpg_diff$hwy, col = 'lightgray') # hwy
boxplot(mpg$hwy, mpg$cty, col = 'lightgray') # hwy
boxplot(mpg$cty, mpg$hwy, col = 'lightgray') # hwy
boxplot(data = mpg_diff, formula, col = 'lightgray')
boxplot(data = mpg_diff, formula, col = 'lightgray')
boxplot(data = mpg, formula, col = 'lightgray')
boxplot(data = mpg_diff, cty ~ class, col = 'lightgray')
class_cty <- mpg_diff %>%
group_by(class) %>%
summarise(mean_cty = mean(cty))
boxplot(class_cty)
class_cty
View(class_cty)
t.test(data = mpg_diff, cty ~ class, var.equal = T)
compact_mean <- summary(mpg_diff %>% filter(class %in% 'compact')) # suv 차량과 compact 차량의 도시연비 기술통계량
suv_mean <- summary(mpg_diff %>% filter(class %in% 'suv'))
compact_mean - suv_mean
compact_mean -- suv_mean
compact_mean
summary(mpg_diff %>% filter(class %in% 'compact')) # suv 차량과 compact 차량의 도시연비 기술통계량
summary(mpg_diff %>% filter(class %in% 'suv'))
select(cty)
select(mpg$cty)
select(fl,cty)
select(fl,cty)
filter(fl %in% c('r', 'p') %>%
# 일반 휘발유와 고급 휘발유의 도시 연비 t 검정
# 데이터 준비 # 내가 검정하려는 변수가 무슨 분포를 따르는지 먼저 보기
mpg_diff2 <- mpg %>%
filter(fl %in% c('r', 'p') %>%
select(fl,cty))
mpg_diff2
# 일반 휘발유와 고급 휘발유의 도시 연비 t 검정
# 데이터 준비 # 내가 검정하려는 변수가 무슨 분포를 따르는지 먼저 보기
mpg_diff2 <- mpg %>%
filter(fl %in% c('r', 'p')) %>%
select(fl,cty)
mpg_diff2
gplot(data = mpg_diff2$cty)
library(ggplot2)
gplot(data = mpg_diff2$cty)
ggplot(data = mpg_diff2$cty)
hist(data = mpg_diff2$cty)
hist(mpg_diff2$cty)
hist(mpg_diff2$cty, freq = F)
hist(mpg_diff2$cty, freq = F, breaks = 50)
lines(density(cty), col = 'red', lwd = 2)
lines(density(mpg_diff$cty), col = 'red', lwd = 2)
hist(mpg_diff2$cty, freq = F, breaks = 50)
lines(density(mpg_diff$cty), col = 'red', lwd = 2)
skewness(cty)
library(e1071)
skewness(cty)
skewness(mpg$cty)
# 참고 https://blog.naver.com/yyj940/221462460980
library(rJava)
library(wordcloud2)
library(RColorBrewer)
library(KoNLP)
library(tm)
library(wordcloud2)
library(tidyverse)
kakao <- readLines('Data/kakao.txt', encoding = 'UTF-8')
kakao <- readLines('Data/kakao.txt', encoding = 'UTF-8')
str(kakao)
View(kakao)
kakao <- str_replace_all(kakao, pattern = '\\[.+\\]', "")
kakao <- str_replace_all(kakao, pattern = '[ㄱ-ㅎ]', '')
kakao <- str_replace_all(kakao, pattern = '이모티콘|삭제된메시지입니다', '')
kakao <- str_replace_all(kakao, pattern = '(2020년).+(:)', '')
kakao <- str_replace_all(kakao, pattern = '(2019년).+(:)', '')
kakao <- str_replace_all(kakao, pattern = '(ㅜ|ㅠ)+', '')
kakao <- str_replace_all(kakao, pattern = '\\W','')
kakao <- na.omit(kakao)
View(kakao)
nouns <- extractNoun(kakao)
nouns
# 사전 설정하기
useNIADic() # 단어를 형태소로 잘 끊어낼 수 있도록 형태소 사전을 선정. 세종도 있고 많음.
library(readr)
NHIS_2016_J_Cases <- read_csv("C:/app/TeamProject/mod_medi_Data/NHIS_2016_J_Cases.csv",
locale = locale(encoding = "CP949"))
View(NHIS_2016_J_Cases)
library(readr)
X2016_medi <- read_csv("C:/app/TeamProject/mod_medi_Data/NHIS_2016_J_Cases.csv",
locale = locale(encoding = "CP949"))
View(X2016_medi)
str(X2016_medi)
load("C:/app/TeamProject/TeamProject/Data/origin_medi/medi.rda")
head(medi_merge)
library(ROracle)
oraDrv <- dbDriver('Oracle')
oraDrv
oraConn <- dbConnect(oraDrv, dbname = 'taeseongdb_high', username = 'ADMIN', password = 'Qlf1122xhd##3')
dbWriteTable(oraConn, 'medi', medi_merge)
oraDrv <- dbDriver('Oracle')
oraConn <- dbConnect(oraDrv, dbname = 'taeseongdb_high', username = 'ADMIN', password = 'Qlf1122xhd##3')
dbWriteTable(oraConn, 'medi', medi_merge)
oraDrv <- dbDriver('Oracle')
oraConn <- dbConnect(oraDrv, dbname = 'taeseongdb_high', username = 'ADMIN', password = 'Qlf1122xhd##3')
dbWriteTable(oraConn, 'medi', medi_merge)
dbWriteTable(oraConn, 'medi', medi_merge)
library(rJava)
oraDrv <- dbDriver('Oracle')
oraConn <- dbConnect(oraDrv, dbname = 'taeseongdb_high', username = 'ADMIN', password = 'Qlf1122xhd##3')
dbWriteTable(oraConn, 'medi', medi_merge)
medi_merge <- as.data.frame(medi_merge)
oraConn <- dbConnect(oraDrv, dbname = 'taeseongdb_high', username = 'ADMIN', password = 'Qlf1122xhd##3')
oraConn
dbWriteTable(oraConn, 'medi', medi_merge)
df_mpg <- ggplot2::mpg
head(df_mpg)
df_mpg <- rename(df_mpg, '모델' = 'model')
library(dplyr)
df_mpg <- rename(df_mpg, '모델' = 'model')
head(df_mpg)
dbWriteTable(oraConn, 'MPG', df_mpg)
dbWriteTable(oraConn, 'medi', medi_merge)
dbWriteTable(oraConn, 'MEDI', medi_merge)
View(medi_merge)
View(df_mpg)
